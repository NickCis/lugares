-- Tables
create table user_emails (
    id uuid not null references auth.users on delete cascade,
    email text,
    primary key (id)
);
create table lists (
  id bigint generated by default as identity primary key,
  title text,
  description text,
  private boolean default true,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);
create table list_owners (
  list_id bigint references lists not null,
  user_id uuid references auth.users not null,
  primary key(list_id, user_id)
);
create table list_invites (
  list_id bigint references lists not null,
  email text not null,
  primary key(list_id, email)
);
create table places (
  id bigint generated by default as identity primary key,
  list_id bigint references lists not null,
  title text,
  description text,
  tags text[],
  urls text[],
  location point,
  address text,
  extra jsonb,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table user_emails enable row level security;
alter table lists enable row level security;
alter table list_owners enable row level security;
alter table list_invites enable row level security;
alter table places enable row level security;

-- Policies

create policy "own email" on user_emails for
    select using (
        (select auth.uid()) = id
    );
create policy "list visibility" on lists for
    select using (
        (private = false) OR
        (exists (select * from list_owners where list_id = id and user_id = auth.uid())) OR
        (exists (select * from list_invites as li join user_emails as ue on li.email = ue.email where ue.id = auth.uid() and li.list_id = lists.id))
    );
create policy "List owners" on list_owners for
    select using (true);
create policy "Individuals can update their own lists." on lists for
    update using (id in (select list_id from list_owners where user_id = auth.uid()));
create policy "Can remove users from ones list" on list_owners for
    delete using (
        (select auth.uid()) in (select user_id from list_owners as lo where lo.list_id = list_id)
    );
create policy "Create List" on lists for
    insert to authenticated with check (true);
create policy "Initial owner / Share list" on list_owners for
    insert to authenticated
    with check (
        ( -- Initial owner trigger
            ((select auth.uid()) = user_id) AND
            (not exists(select * from list_owners as lo where lo.list_id = list_id))
        ) OR
        ((select auth.uid()) IN (select user_id from list_owners as lo where lo.list_id = list_id)) OR
        ((select auth.uid()) IN (select ue.id from list_invites as li JOIN user_emails as ue ON li.email = ue.email WHERE li.list_id = list_id))
    );
create policy "Select list invites" on list_invites for
    select using (
        (list_id in (select lo.list_id from list_owners as lo where user_id = auth.uid())) OR
        (email in (select ue.email from user_emails as ue where id = auth.uid()))
    );
create policy "Delete list invites" on list_invites for
    delete using (
        (list_id in (select lo.list_id from list_owners as lo where user_id = auth.uid())) OR
        (email in (select ue.email from user_emails as ue where id = auth.uid()))
    );
create policy "Can add invites in own lists" on list_invites for
    insert to authenticated
    with check (
        (list_id in (select lo.list_id from list_owners as lo where user_id = auth.uid()))
    );
create policy "Select places" on places for
    select using (
        (exists (select lo.list_id from list_owners as lo where lo.list_id = places.list_id and user_id = auth.uid()))
    );
create policy "Delete place" on places for
    delete using (
        (exists (select lo.list_id from list_owners as lo where lo.list_id = places.list_id and user_id = auth.uid()))
    );
create policy "Create place" on places for
    insert to authenticated
    with check (
        (exists (select lo.list_id from list_owners as lo where lo.list_id = places.list_id and user_id = auth.uid()))
    );
create policy "Update place" on places for
    update using (
        (exists (select lo.list_id from list_owners as lo where lo.list_id = places.list_id and user_id = auth.uid()))
    );

-- Triggers

create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.user_emails (id, email)
  values (new.id, new.email);
  return new;
end;
$$;

create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

create or replace function handle_initial_list_owner()
returns trigger
language plpgsql
as $$
declare
    user_id uuid;
begin
  select auth.uid() into user_id;
  insert into list_owners(list_id, user_id)
    values (new.id, user_id);
  return new;
end;
$$;

create or replace trigger "list_initial_owner"
  after insert on "lists"
  for each row execute function handle_initial_list_owner();

create or replace function handle_delete_list_owner()
returns trigger
security definer
language plpgsql
as $$
declare
    owners uuid[];
begin
  select user_id from list_owners into owners where list_id = old.list_id;

  if not found then
    -- TODO: delete places
    delete from places where list_id = old.list_id;
    delete from list_invites where list_id = old.list_id;
    delete from lists where id = old.list_id;
  end if;
 return old;
end;
$$;

create or replace trigger "delete_list_owner"
  after delete on "list_owners"
  for each row execute function handle_delete_list_owner();

-- create or replace function insert_list(title text, description text, private boolean)
-- returns bigint
-- language plpgsql
-- as $$
-- declare
--     user_id uuid;
--     list_id bigint;
-- begin
--     select auth.uid() into user_id;
--     assert user_id is not null, 'ERROR: not authenticated';
-- 
--     insert into lists(title, description, private)
--     values (insert_list.title, insert_list.description, insert_list.private)
--     returning id into list_id;
-- 
--     insert into list_owners(list_id, user_id)
--     values (list_id, userid);
-- 
--     return list_id;
-- end; $$;
